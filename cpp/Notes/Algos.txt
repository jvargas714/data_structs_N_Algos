______________________________________Key Concepts__________________________________________________
Worst case:
	No matter what the algorithm will finish after X steps. Some advantages to using the worst case
	scenario is obvious as the bound set will never be violated.

Average Time Complexity:
	TBD

expected time:
	Most commonly used metric, and it sits in between the other two. Avoids the problem with
	average time complexity by using the worst case input. Avoids worst case complexity by
	averaging over internal choices. In other words, it assumes typical behavior when we can
	actually be certain what typical means, and uses worst case behavior when we can't.

Best Time:
	TBD

__________________________________Sorting Algorithms________________________________________________
	Note that the fastest sorting algorithm for arbitrary data takes O(n log n) time.

Merge Sort [ worst case: O(n log n) Average: O(n log n) ]
	- a recursive way to sort an array.
	- STEPS:
		1. first divide the array in half and recursively sort each half of the array.
		2. Then we combine the two halves into a sorted array.
	- relies on the fact that one can quickly combine two sorted arrays into a single sorted array.
	- One can do so by keeping two pointers into the two sorted arrays.
		* One repeatedly adds the smaller of the two numbers pointed to to the new array and
			advances the pointer.

QuickSort [ worst case: O(n^2) expected time: 0(n log n) ]
	- sorting algorithm that takes O(n^2) time in the worst case and O(n log n) expected time
	- select an element at random to be the pivot.
	- Divide the array into two groups
		1. group of elements greater than the pivot
		2. group of elements that are less than the pivot
		3. recursively sort elements before the pivot abd the portion after the pivot
	- typically very fast in practice, but worst case is still O(n^2)
	- make sure the mention that if you need to be guarenteed O(n log n) running time, mention
		another algo like mergesort

_____________________________________Questions Mentioned____________________________________________
1. Reversing the words in a string
	 Write a function to reverse the order of words in a string in place.

2. Coin Puzzle
	You have 8 coins which are all the same weight, except for one which is slightly heavier than
	the others. You also have an old style balance, which allows you to weigh two piles of coins
	to see which one is heavier. What is the fewest number of weighings that you can make which will
	tell you which coin is heavier?

3. Searching through an array
	Given a sorted array of integers, how can you find the location of a particular integer x?
	hint: use a binary search. Compare number with middle element at that point you will now which
		half the a value would be in.

4. Preventing a deadlock ( in multi-threading )
	How can we ensure that a deadlock doesnt take place?

5. What is polymorphism?

6. What is a virtual function?

7.  A to I
	Write a function to convert a string into an integer. (the function is called A to I because
		we are converting an ASCII string into an integer.)

8. Nearest Neighbor
	Say you have an array containing information regarding n people. Each person is described using
	a string (their name) and a number (their position along a number line). Each person has three
	friends, which are the three ppl whos number is nearest their own. Describe an algo to id each
	persons three friends.

9. Cycle in a linked list Handout 2
	How can one determine whether a singly linked list has a cycle?

10. Data Structure for anagrams
	Given an English word in the form of a string, how can you quickly find all valid anagrams for
	that string ( all valid rearrangements of the letters that form valid english words)? Allowed to
	precompute whatever you want to and store whatever you optionally precompute on disk.

	Ans:
		1. Pre-processing
			a. for each word in the dict we put the letters in alpha order ie hacking becomes
				acghikn
			b. add the sorted letters as a key in the table and the original word as one of the
				values in a list of values for that key.
			c. for example the entry for opst would be the list [opts, post, stop, pots, tops, spot]
			d. basically its a hash table where each sorted letters map to a list so post and pots
				would be opst which maps to the list containing all the words

11. Factorial Zeros
	Without using a calculator how many zeros at the end of 100!
	Hint : remember that the number of zeros at the end of a number is equal to the number of times
		10 (or 2*5) appears when you factor the number. Therefore we think about the prime
		factorization of 100! and how many 2s and 5s there are.

		1. number of many more 2s than 5s so we look at number of 5s
		2. the number of 5s is also the number of 10s in the factorization
		3. there is one 5 for every factor of 5 in or factorial multiplication
		4. an extra 5 for 25 50 75 100 ie 5*5 5*5*2 5*5*3 5*5*2*2 --> * * *
		5. from here just count the number of 5s

12. Deck Shuffling
	Given an array of distinct integers, give an algorithm to randomly reorder the integers so that
	each possible reordering is equally likely.

13. Path between nodes in a binary tree
	Design an algorithm to find a path from one node in a binary tree to another

14. Compute 2^x
	How quickly can you compute 2^x?
	ANs: 1 << x // this is one left shifted by x

15. Is power of 2
	How quickly can we determine whether a number is a power of 2?

16. Ransom Note

__________________________________________Sorting Algorithms Described______________________________
Bubble Sort
Worst Case: O(n^2)
Average Case: O(n^2)
Best Case: O(n)
Space Complexity: O(1)
[ * * * * * * ]

- keeps track of a changed flag which gets set to true if a swap is made
- goes through list and checks if the next item ar[i+1] > ar[i]
	* if so then swap them and set changed flag to true
- this pattern is repeated under a while loop that is terminated by the changed flag when we are
	able to loop through a list with performing any swaps

________________________________________________Bit Manip___________________________________________
Twos complement typcially used for negative number representation

to get -18 we can do it like so:
	take positive 18 first
	0 0 0 1 0 0 1 0
		1. take all bits except the sign bit (msb)
		2. then ivert all bits and add 1 to it
		3. now make the sign bit a 1
	1 1 1 0 1 1 0 1
		** now we add 1 to it
	1 1 1 0 1 1 1 0  --> boom we are done

logical vs arithmetic shifting
	-- left shift will multiply it by two
	-- right shift will divide by two

	-- dealing with negative numbers and shifting
		* logical shift take -23
			1 1 1 0 1 0 0 1
			>>
			0 1 1 1 0 1 0 0 ( 116 )

		* arithmetic right shift (will preserve the original sign bit)
			1 1 1 0 1 0 0 1
			>>
			1 1 1 1 0 1 0 0 (-12)
________________________________________________recursion___________________________________________
Example program to count .txt files in file system
int countTxt(Dir dir){
	if(dir == null) return 0;
	int count = 0;

	// count current dir we are in now
	for(File file : dir){
		if(file.endsWith(".txt") ){
			count+=1;
		}
	}

	// recursive part
	for(Dir subdir : dir){
		count += countTxt(subdir);
	}
	return count;
}

	  --all recurs methods must have a base case
	  -- see fib recurs tree for a good example



________________________________________________Algorithm Paradigms________________________________________________
	Backtracking:  https://www.geeksforgeeks.org/backtracking-introduction/
		- Algorithmic technique for solving problems recursively by trying to build a solution incrementally
		- when a solution is found to not satisfy the constraints we ditch that solution (backtrack)
		- solved one piece at a time, removing solutions that do not satisfy the constraints of the problem at any time

		How to know when to use backtracking:
			- when searching for every possible combination in order to solve an optimization problem
			- when solving a constraint satisfaction problem (CSPs)
				* CSPs are mathematical questions defined as a set of objects whose state must satisfy a number of
					constraints or limitations.
				* examples:
					1. Sudoku solving algorithm
					2. Eight queen puzzle
					3. Crosswords
					4. Futoshiki
			- well defined constraints
			-

________________________________________________Algorithm Descriptions________________________________________________
    KMP (Knuth Morris Pratt) Algorithm: https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
        - pattern search algorithm that finds all occurences of pat[] in txt[] you may assume n > m where n is length of
            n is len of txt
        Example:
            Input:  txt[] =  "AABAACAADAABAABA"
                    pat[] =  "AABA"
            Output: Pattern found at index 0
                    Pattern found at index 9
                    Pattern found at index 12

        - time complexity of KMP is O(n) in the worst case
        - uses degenerating property (pattern having same sub-patterns appearing more than once in the pattern)
            of the pattern and improves the worst case complexity to O(n)
        - basic idea behind KMP is:
            a. whenever a mismatch is detected (after some matches) we already know some of the characters
                in the text of the next window. We can take advantage of this information to avoid matching the
                characters that already know will already match.

        Explanation:
	        Matching Overview
			txt = "AAAAABAAABA"
			pat = "AAAA"

			We compare first window of txt with pat
			txt = "AAAAABAAABA"
			pat = "AAAA"  [Initial position]
			We find a match. This is same as Naive String Matching.

			In the next step, we compare next window of txt with pat.
			txt = "AAAAABAAABA"
			pat =  "AAAA" [Pattern shifted one position]

			Normally when implementing the naive solution the next step would be to compare the next substring with
			i = 1 and j = 0, where i is the txt index and j is the pattern index.

			This is where KMP does optimization over Naive. In this
			second window, we only compare fourth A of pattern
			with fourth character of current window of text to decide
			whether current window matches or not. Since we know
			first three characters will anyway match, we skipped
			matching first three characters.

			Need of Preprocessing?
				An important question arises from the above explanation,
				how to know how many characters to be skipped. To know this,
				we pre-process pattern and prepare an integer array
				lps[] that tells us the count of characters to be skipped.

        Preprocessing Overview:
            KMP algorithm preprocesses pat[] and constructs an auxiliary lps[] of size m (same as size of pattern) which is
            used to skip characters while matching.
            name lps indicates longest proper prefix which is also suffix.. A proper prefix is prefix with whole string not
            allowed. For example, prefixes of “ABC” are “”, “A”, “AB” and “ABC”. Proper prefixes are “”, “A” and “AB”.
            Suffixes of the string are “”, “C”, “BC” and “ABC”.

            We search for lps in sub-patterns. More clearly we focus on sub-strings of patterns that are either prefix and
            suffix.

            For each sub-pattern pat[0..i] where i = 0 to m-1, lps[i] stores length of the maximum matching proper prefix
            which is also a suffix of the sub-pattern pat[0..i]
               lps[i] = the longest proper prefix of pat[0..i]
                          which is also a suffix of pat[0..i]

    Combinations (order does not matter) of a set of numbers ie (n choose k) Binomial Coefficient
		- n choose k
		- means how man different ways can u choose k elements from n elements (order does not matter)
		- formula ==>    n! / k!(n-k)!
			* this formula tells us how many combinations are possible

		Reference Skiena Algorithm Design section 14.5 Generating Subsets
			- there are 2^n distinct subsets of an n-element set, includes the empty set as well as the set itself
			- key to generate all subsets of n elements is establishing a numerical sequence among all 2^n subsets
			Three main alternative ways to generate subsets
				1. most straight forward is Lexicographic order
					* means sorted order, most natural way to generate combinatorial objects
					* example for {1, 2, 3} ==> {}, {1}, {1, 2}, {1, 2, 3}, {2}, {3},
						** in practice this is surprisingly difficult to do
				2. Gray Code



	Permutations (order matters)

________________________________________________Trees and Graphs________________________________________________
Depth First Search (DFS):
	- traverse or searching a tree or graph data structures
	- starts at root node
	- explores as far as possible along each branch before backtracking 

Breadth First Search (BFS):
	- traverse or search a tree or graph data structures 
	- starts at root node
	- explores all neighbor nodes at the present depth 